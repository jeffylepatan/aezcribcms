<?php

/**
 * @file
 * Install, update and uninstall functions for the AezCrib Commerce module.
 */

use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\EntityTypeInterface;

/**
 * Implements hook_install().
 */
function aezcrib_commerce_install() {
  try {
    // Add field_credits to user entity during module installation
    $field_storage_definition = BaseFieldDefinition::create('integer')
      ->setLabel(t('AezCoins Credits'))
      ->setDescription(t('The amount of AezCoins credits the user has.'))
      ->setDefaultValue(0)
      ->setSettings([
        'min' => 0,
        'max' => 999999999,
      ])
      ->setDisplayOptions('view', [
        'label' => 'above',
        'type' => 'number_integer',
        'weight' => 10,
      ])
      ->setDisplayOptions('form', [
        'type' => 'number',
        'weight' => 10,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDisplayConfigurable('view', TRUE);

    // Check if field already exists before installing
    $existing_field = \Drupal::entityDefinitionUpdateManager()
      ->getFieldStorageDefinition('field_credits', 'user');
    
    if (!$existing_field) {
      \Drupal::entityDefinitionUpdateManager()
        ->installFieldStorageDefinition('field_credits', 'user', 'aezcrib_commerce', $field_storage_definition);
    }

    // Create default content types if they don't exist
    _aezcrib_commerce_create_content_types();
    
  } catch (\Exception $e) {
    \Drupal::logger('aezcrib_commerce')->error('Error during module installation: @error', [
      '@error' => $e->getMessage(),
    ]);
    throw $e;
  }
}

/**
 * Implements hook_uninstall().
 */
function aezcrib_commerce_uninstall() {
  // Remove the field_credits field from user entity
  $field_storage_definition = \Drupal::entityDefinitionUpdateManager()
    ->getFieldStorageDefinition('field_credits', 'user');
  
  if ($field_storage_definition) {
    \Drupal::entityDefinitionUpdateManager()
      ->uninstallFieldStorageDefinition($field_storage_definition);
  }
}

/**
 * Creates the required content types for the commerce system.
 */
function _aezcrib_commerce_create_content_types() {
  $node_types = [
    'credit_transaction' => [
      'name' => 'Credit Transaction',
      'description' => 'Records of AezCoins credit purchases and donations',
    ],
    'purchase_transaction' => [
      'name' => 'Purchase Transaction', 
      'description' => 'Records of worksheet purchases using AezCoins',
    ],
  ];

  foreach ($node_types as $type => $info) {
    try {
      // Check if content type already exists
      $existing_type = \Drupal::entityTypeManager()
        ->getStorage('node_type')
        ->load($type);
      
      if (!$existing_type) {
        $node_type = \Drupal::entityTypeManager()
          ->getStorage('node_type')
          ->create([
            'type' => $type,
            'name' => $info['name'],
            'description' => $info['description'],
          ]);
        $node_type->save();
        
        \Drupal::logger('aezcrib_commerce')->info('Created content type: @type', [
          '@type' => $type,
        ]);
      }
      
      // Add fields to the content types
      _aezcrib_commerce_add_fields_to_content_type($type);
      
    } catch (\Exception $e) {
      \Drupal::logger('aezcrib_commerce')->error('Error creating content type @type: @error', [
        '@type' => $type,
        '@error' => $e->getMessage(),
      ]);
      // Continue with other content types even if one fails
    }
  }
}

/**
 * Adds fields to content types.
 */
function _aezcrib_commerce_add_fields_to_content_type($content_type) {
  $field_storage_config = \Drupal::entityTypeManager()->getStorage('field_storage_config');
  $field_config = \Drupal::entityTypeManager()->getStorage('field_config');

  if ($content_type === 'credit_transaction') {
    $fields = [
      'field_transaction_amount' => [
        'type' => 'integer',
        'label' => 'Transaction Amount',
        'description' => 'Amount of AezCoins in this transaction',
        'required' => TRUE,
      ],
      'field_payment_method' => [
        'type' => 'string',
        'label' => 'Payment Method',
        'description' => 'Payment method used (GCash, Bank Transfer, etc.)',
        'required' => TRUE,
      ],
      'field_payment_reference' => [
        'type' => 'string',
        'label' => 'Payment Reference',
        'description' => 'Reference number from payment provider',
        'required' => FALSE,
      ],
      'field_real_money_amount' => [
        'type' => 'decimal',
        'label' => 'Real Money Amount',
        'description' => 'Amount in PHP donated',
        'required' => TRUE,
        'settings' => ['precision' => 10, 'scale' => 2],
      ],
      'field_transaction_status' => [
        'type' => 'list_string',
        'label' => 'Transaction Status',
        'description' => 'Current status of the transaction',
        'required' => TRUE,
        'settings' => [
          'allowed_values' => [
            'pending' => 'Pending',
            'completed' => 'Completed', 
            'failed' => 'Failed',
            'refunded' => 'Refunded',
          ],
        ],
      ],
      'field_receipt_image' => [
        'type' => 'image',
        'label' => 'Receipt Image',
        'description' => 'Upload receipt image for verification',
        'required' => FALSE,
      ],
      'field_user_reference' => [
        'type' => 'entity_reference',
        'label' => 'User',
        'description' => 'User who made this transaction',
        'required' => TRUE,
        'settings' => ['target_type' => 'user'],
      ],
    ];
  } else if ($content_type === 'purchase_transaction') {
    $fields = [
      'field_worksheet_reference' => [
        'type' => 'entity_reference',
        'label' => 'Worksheet',
        'description' => 'Worksheet that was purchased',
        'required' => TRUE,
        'settings' => ['target_type' => 'node'],
      ],
      'field_purchase_amount' => [
        'type' => 'integer',
        'label' => 'Purchase Amount',
        'description' => 'Amount of AezCoins spent',
        'required' => TRUE,
      ],
      'field_user_reference' => [
        'type' => 'entity_reference',
        'label' => 'User',
        'description' => 'User who made this purchase',
        'required' => TRUE,
        'settings' => ['target_type' => 'user'],
      ],
      'field_purchase_status' => [
        'type' => 'list_string',
        'label' => 'Purchase Status',
        'description' => 'Status of the purchase',
        'required' => TRUE,
        'settings' => [
          'allowed_values' => [
            'completed' => 'Completed',
            'refunded' => 'Refunded',
          ],
        ],
      ],
    ];
  }

  foreach ($fields as $field_name => $field_info) {
    try {
      // Create field storage if it doesn't exist
      $field_storage = $field_storage_config->load($field_name);
      if (!$field_storage) {
        $storage_settings = isset($field_info['settings']) ? $field_info['settings'] : [];
        
        $field_storage = $field_storage_config->create([
          'field_name' => $field_name,
          'entity_type' => 'node',
          'type' => $field_info['type'],
          'settings' => $storage_settings,
        ]);
        $field_storage->save();
        
        \Drupal::logger('aezcrib_commerce')->info('Created field storage: @field', [
          '@field' => $field_name,
        ]);
      }

      // Create field instance if it doesn't exist
      $field_config_id = "node.{$content_type}.{$field_name}";
      $field = $field_config->load($field_config_id);
      if (!$field) {
        $field = $field_config->create([
          'field_name' => $field_name,
          'entity_type' => 'node',
          'bundle' => $content_type,
          'label' => $field_info['label'],
          'description' => $field_info['description'],
          'required' => $field_info['required'],
          'settings' => isset($field_info['settings']) ? $field_info['settings'] : [],
        ]);
        $field->save();
        
        \Drupal::logger('aezcrib_commerce')->info('Created field instance: @field for @type', [
          '@field' => $field_name,
          '@type' => $content_type,
        ]);
      }
    } catch (\Exception $e) {
      \Drupal::logger('aezcrib_commerce')->error('Error creating field @field for @type: @error', [
        '@field' => $field_name,
        '@type' => $content_type,
        '@error' => $e->getMessage(),
      ]);
      // Continue with other fields even if one fails
    }
  }
}